<!DOCTYPE html>

<html>
	<head>
	<meta name="viewport" content="initial-scale=1.0, width=device-width" />
	<link rel="stylesheet" type="text/css" href="https://js.cit.api.here.com/v3/3.0/mapsjs-ui.css"/>
	<script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-core.js"></script>
	<script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-service.js"></script>
	<script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-ui.js"></script>
	<script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-mapevents.js"></script>
</head>
</html>


<body>
<form id="sampleform" onsubmit="return update_location();" >
	Location: <input id="search_location" type="text" name="search_location" value=""><br>
</form>
<button onclick="return update_location();">Click me</button>
</form>
<div id="map" style="position:absolute; width:100%; height:90%; background:grey" ></div>
<div id="panel" style="width: 600px;"></div>
</body>

<script type="text/javascript">

	var form = $('#csampleform');
	form.submit(function(e) {
	        // prevent form submission
	        e.preventDefault();
	})

	function geocode(platform) {
		console.log("Hello world!");
		console.log(document.getElementById('search_location').value)
		var geocoder = platform.getGeocodingService(),
		    geocodingParameters = {
		      //searchText: 'HERE Kuala Lumpur,Block 2B-13-2, Level 13, Plaza Sentral, Jalan Stesen Sentral, KL Sentral, 50470 Kuala Lumpur, Malaysia', 

		      searchText: document.getElementById('search_location').value,
		      jsonattributes : 1
		    };
			geocoder.geocode(
				geocodingParameters,
			    onSuccess,
			    onError
			);
	}

	/**
	 * This function will be called once the Geocoder REST API provides a response
	 * @param  {Object} result          A JSONP object representing the  location(s) found.
	 *
	 * see: http://developer.here.com/rest-apis/documentation/geocoder/topics/resource-type-response-geocode.html
	 */
	function onSuccess(result) {
	  	var locations = result.response.view[0].result;
	 	/*
	  	* The styling of the geocoding response on the map is entirely under the developer's control.
	  	* A representitive styling can be found the full JS + HTML code of this example
	  	* in the functions below:
	  	*/
	  	addLocationsToMap(locations);
	  	addLocationsToPanel(locations);

	  	// ... etc.
	}

	/**
	 * This function will be called if a communication error occurs during the JSON-P request
	 * @param  {Object} error  The error message received.
	 */
	function onError(error) {
	  	alert('Ooops!');
	}

	// TODO : Attach the event listener
	function setUpClickListener(map) {
		map.addEventListener('tap', function (evt) {
		var coord = map.screenToGeo(evt.currentPointer.viewportX,
 		evt.currentPointer.viewportY);
			alert('Clicked at ' + Math.abs(coord.lat.toFixed(6)) +
				((coord.lat > 0) ? 'N' : 'S') +
				' ' + Math.abs(coord.lng.toFixed(6)) +
				 ((coord.lng > 0) ? 'E' : 'W'));
 		});
	}

	var platform = new H.service.Platform({
		app_id: 'l0EQlSYQwyhhUVGBOXoL',
		app_code: 'J_-4B-LUkVLR1W1xna4GDw',
		useCIT: true,
		useHTTPS: true
	});

	var defaultLayers = platform.createDefaultLayers();

	var map = new H.Map(document.getElementById('map'),
		defaultLayers.normal.map,{
			center: {lat: 8.800, lng: 111.8471577 },
		zoom: 5
	});

	

	var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
	setUpClickListener(map);

	// Create the default UI components
	var ui = H.ui.UI.createDefault(map, defaultLayers);

	// Hold a reference to any infobubble opened
	var bubble;
	/**
	 * Opens/Closes a infobubble
	 * @param  {H.geo.Point} position     The location on the map.
	 * @param  {String} text              The contents of the infobubble.
	 */
	function openBubble(position, text){
	 	if(!bubble){
	    	bubble =  new H.ui.InfoBubble(
	    	position,
	    	{content: text});
	    	ui.addBubble(bubble);
	  	} else {
	    	bubble.setPosition(position);
	    	bubble.setContent(text);
	    	bubble.open();
	  	}
	}

	/**
	 * Creates a series of list items for each location found, and adds it to the panel.
	 * @param {Object[]} locations An array of locations as received from the
	 *                             H.service.GeocodingService
	 */
	function addLocationsToPanel(locations){
	  	var nodeOL = document.createElement('ul'),
	    i;
	  	nodeOL.style.fontSize = 'small';
	  	nodeOL.style.marginLeft ='5%';
	  	nodeOL.style.marginRight ='5%';
	   	for (i = 0;  i < locations.length; i += 1) {
	     	var li = document.createElement('li'),
	        divLabel = document.createElement('div'),
	        address = locations[i].location.address,
	        content =  '<strong style="font-size: large;">' + address.label  + '</strong></br>';
	        position = {
	        	  lat: locations[i].location.displayPosition.latitude,
	         	 lng: locations[i].location.displayPosition.longitude
	        };
		  	content += '<strong>houseNumber:</strong> ' + address.houseNumber + '<br/>';
	  	    content += '<strong>street:</strong> '  + address.street + '<br/>';
		  	content += '<strong>district:</strong> '  + address.district + '<br/>';
		    content += '<strong>city:</strong> ' + address.city + '<br/>';
		    content += '<strong>postalCode:</strong> ' + address.postalCode + '<br/>';
		    content += '<strong>county:</strong> ' + address.county + '<br/>';
		    content += '<strong>country:</strong> ' + address.country + '<br/>';
		    content += '<br/><strong>position:</strong> ' +
	        Math.abs(position.lat.toFixed(4)) + ((position.lat > 0) ? 'N' : 'S') +
	        ' ' + Math.abs(position.lng.toFixed(4)) + ((position.lng > 0) ? 'E' : 'W');
	      	divLabel.innerHTML = content;
	      	li.appendChild(divLabel);
	      	nodeOL.appendChild(li);
	  	}
	  	locationsContainer.appendChild(nodeOL);
	}

	/**
	 * Creates a series of H.map.Markers for each location found, and adds it to the map.
	 * @param {Object[]} locations An array of locations as received from the
	 *                             H.service.GeocodingService
	 */
	function addLocationsToMap(locations){
	  	var group = new  H.map.Group(),
	    position,
	    i;
	  	// Add a marker for each location found
	  	for (i = 0;  i < locations.length; i += 1) {
	    	position = {
	      	lat: locations[i].location.displayPosition.latitude,
	      	lng: locations[i].location.displayPosition.longitude
	    };
	    marker = new H.map.Marker(position);
	    marker.label = locations[i].location.address.label;
	    group.addObject(marker);
	  	}
	  	group.addEventListener('tap', function (evt) {
	    	map.setCenter(evt.target.getPosition());
	    	openBubble(
	       		evt.target.getPosition(), evt.target.label);
	  	}, false);
	  	// Add the locations group to the map
	  	map.addObject(group);
	  	map.setCenter(group.getBounds().getCenter());
	}

	geocode(platform);
	function update_location(){
    	geocode(platform);
    }




</script>